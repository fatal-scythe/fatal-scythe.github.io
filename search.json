[{"title":"平平无奇的语音助手（一）","date":"2021-08-04T13:52:57.000Z","url":"/posts/35a47c04/","tags":[["电子设计","/tags/%E7%94%B5%E5%AD%90%E8%AE%BE%E8%AE%A1/"],["成功实现","/tags/%E6%88%90%E5%8A%9F%E5%AE%9E%E7%8E%B0/"]],"categories":[["电子设计","/categories/%E7%94%B5%E5%AD%90%E8%AE%BE%E8%AE%A1/"]],"content":"平平无奇的语音助手（一） 嘉立创紫&emsp;&emsp;立创EDA又双叒叕办活动了——《立创EDA暑期训练营2021》(哇哦~ ~ ~ ~ )这次活动有两个主题可以选择，DIY功放和离线语音，按照我的特性肯定是选择两者结合…然而看了视频直播后，发现自己精力有限还是只做更好玩的离线语音吧~&emsp;&emsp;语音助手，当然得是像贾维斯那样的！，实际一点，或者像小爱同学那样，emm控制个空调总行吧？好吧，那取名应该就是“平平无奇的语音助手”了。&emsp;&emsp;anyway,贾维斯咱们在下一篇再见。&emsp;&emsp;老(?)规矩，先放电路板实物图！ &emsp;&emsp;哇哦！这就是嘉立创最新推出的“嘉立创紫”配色吗？老实说,在板子到手之前我还是很担心这紫色会不会太丑，可当我拿到板子之后，这精致的做工，绚丽的颜色 ~ 简直是爱不释手。这里先对外观进行一下欣赏，之后再来分析设计的好坏 ~&emsp;&emsp;值得一提的是，嘉立创疯狂降价，每个月免费2次打样，各种颜色都免费，4层板也免费…赞。和隔壁jp好好竞争竞争，让广大消费者获利~ 实物焊接 &emsp;&emsp;经过一个下午，从快乐到麻木再到烦躁，从自己焊接到叫女朋友帮忙焊接再到让女朋友焊(她竟然把那小到看不清ESD焊上了…)，经历了QX2303L50F升压芯片的GND虚焊，下载程序选择端J1焊反了等问题，终于还是把这个核心部分焊完了！！当我插上电池，接上扬声器，把SW切换到电池时，我的语音助手边亲切的问候道：“欢迎使用智能管家，您可以使用’智能管家’唤醒我”。oh~~~~~~~~~~oh~~~~~~~~oh~~~~~~~~~~oh~~~~~~~~oh~~~~~~~~&emsp;&emsp;在进行了几轮对话后，发现效果其实蛮不错的，识别率很高，反应也没有延迟，扬声器的驱动声音洪亮失真较小，只有轻微杂音。可以说是一次成功了吧。&emsp;&emsp;接下来应该是下载程序…好的，老谭已经帮我踩雷了，这设计无法下载程序，等第二版吧~ 原理图与PCB设计 &emsp;&emsp;基于启英泰伦CI-C22GS02S离线语音模块，实际上主要设计了电源模块，串口下载模块，红外收发模块，麦克风和扬声器接口，其余接口引出。 电源模块。 使用USB和电池双电源供电，既可以使用USB连接电脑调试，也可以使用电池将模块固定于某处长时间工作。电源的选择使用SW1切换。 电池采用两节7号AAA电池串联供电，并使用QX2303L50F升压芯片升压至5V。 串口下载模块。 采用简单好用的CH330芯片，好一手USB转TTL。 J1通过跳线帽将MCLK/UPDATE连接上拉至3.3V时使能下载程序，正常运行时接GND。 红外收发模块 按照官方设计，两个红外发送可以覆盖更广的范围，实现无死角发送。 但控制空调的难点在于编码，不像电视的NEC码，格力空调(一般都是格力空调吧)的编码似乎没有现成的模块，自己写编码也应该有点麻烦….等（二）吧。 麦克风和扬声器 按照官方手册选择了麦克风型号，但扬声器我之前买了几个，应该可以用。 并设计了4个ESD用于防静电（我并不知道这个是否必要） &emsp;&emsp;PCB如上。有了上一次的经验，这次给两层铺地多加了几对过孔， 存在的问题与改进小计 没有设计电源指示灯，并且希望电源灯不要一直亮，太费电了。可以使用三极管+RC充电电路点亮一会儿LED。 ESD封装实在是太小了！十分难焊 麦克风与扬声器离模块太远(我不知道这有不有影响，就是感觉太远了不太好） 下载程序时需要保持串口连接对模块进行重新上电！！太坑了！手册里根本没有说过！！这一块需要重新设计一个按键或者什么电路 绘制PCB期间改过两次原理图，导致了J1、J3、J4的丝印就只剩编号了…明明是个小失误，可看着真是太难受了 ps.额外感谢老谭，帮我图片加水印 "},{"title":"Keil Studio来了，但还没完全来","date":"2021-06-26T08:17:26.000Z","url":"/posts/a637d452/","tags":[["电子设计","/tags/%E7%94%B5%E5%AD%90%E8%AE%BE%E8%AE%A1/"],["编程","/tags/%E7%BC%96%E7%A8%8B/"]],"categories":[["电子设计","/categories/%E7%94%B5%E5%AD%90%E8%AE%BE%E8%AE%A1/"]],"content":"Keil Studio来了，但还没完全来&emsp;&emsp;距离2013年10月，推出的Keil MDK V5.0版本已经过去了快8年了，VS code都成了宇宙第一编辑器，6月10日，ARM终于推出了全新的Keil Studio！。我们先来看一下Keil Studio的外观布局。 欢迎界面 打开示例工程，并编译 &emsp;&emsp;可以看到浓浓的一股VScode味道（此刻我也用着VScode写这篇博客），比起MDK5好看了许多，想起来在VScode里装Keil插件就为了有个舒适的编辑环境，MDK实在太丑了！！ &emsp;&emsp;下面 介绍 翻译一下Keil Studio的全新特性！并实际上手体验体验。 下一代Arm-Keil工具Arm is excited to announce the release of Keil Studio Cloud, the first component of the next-generation Keil tool suite, which is now available in open beta. This early access beta will allow developers to experience the Keil Studio workflow first-hand with a limited set of supported development boards and features. The browser-based IDE provides a cloud-hosted platform with direct Git integration for enabling distributed teams, collaborative development and modern CI workflows for rapid IoT device development. Example projects are provided for common IoT cloud service providers, all of which can be built and even debugged in the browser. You can log in to Keil Studio Cloud today using your Arm Account or create a new Arm Account if you don’t have one already. Keil.arm.com lists all the boards we currently support. ARMAnnouncing Keil Studio Cloud, our next generation browser-based IDE &emsp;&emsp;Keil Studio是一款灵活的新工具，它有网页版和桌面版两种版本。现在Keil Studio的第一个组件Keil Studio Cloud已经开始beta版测评，支持在浏览器上添加软件包，编辑，调试和运行Git。 用户可以在浏览器直接远程连接Keil Studio Cloud，不需要在电脑上安装任何环境。 云端在线调试，代码自动补全，实时错误检测。 提供多个可以直接运行的示例工程。 内部直接集成Git，支持团队协作开发和现代 CI 工作流。 针对物联网，推出OTA编程，测试和更新一条龙。 针对机器学习，让Crortex-M内核物联网节点可以直接使用本地传感器数据进行计算。 Keil Studio Cloud的初体验&emsp;&emsp;硬件编程的Hello World当然非跑马灯莫属了！我要尝试用这个新“神器”编写一个适用于我STM32F103开发板的跑马灯工程。 1、注册ARM账号&emsp;&emsp;要使用Keil Studio Cloud必须要登录ARM账号，所有的工程文件和个人配置信息全部保存在云端，所以ARM账号是必须的，没有的同学可以按照提示注册一个。 2、Let’s code.&emsp;&emsp;在注册完成后，便进入欢迎页面。菜单栏，侧边栏，状态栏，标签栏，设置逻辑，甚至快捷键都一样！简直就是VScode的网页版… &emsp;&emsp;此时，我是想编写一个适用于我STM32F103开发板的流水灯工程的，但卡在了第一步——创建工程。开开心心点击“New Project”，发现只能从Example Project里面选，三款芯片都是NXP的…像这样。Where is my STM32? New Project 三款特定的开发板 3、结论：Keil Studio还不支持别的芯片，无法开发，关掉浏览器。 Keil Studio来了，但还没完全来&emsp;&emsp;带着好看的外表，云计算的优势它来了；但是支持的芯片如此的少，它可能是还没有完全来吧…"},{"title":"VisualBasic6.0——伴我走过编程路","date":"2021-05-31T11:42:21.000Z","url":"/posts/25127c30/","tags":[["编程","/tags/%E7%BC%96%E7%A8%8B/"],["VB","/tags/VB/"]],"categories":[["编程","/categories/%E7%BC%96%E7%A8%8B/"]],"content":"VisualBasic6.0——伴我走过编程路 1、什么是Visual Basic？&emsp;&emsp;这是一门编程语言，是一款可视化集成编程工具，是微软1991年推出的亲儿子。今天的主角“Visual Basic 6.0”是1998年微软推出的跨时代经典产品。其特点是面向过程、无可移植性（仅支持windows操作系统）、可视化编程、模块化编程、占用资源低、简单，以上特点在某种程度上看来就是优点，特别是对于初学者来说。当然，这些优点在某种程度上来说也是它的缺点，扩展性差，无法编写大型应用等都决定了它必然的衰退。&emsp;&emsp;说了这么多，大家可能的印象还是“这啥语言啊？没听说过”，正因为如此，我写了这篇文章，目的是纪念。 窗体布局，其可视化编程特点清晰可见 &emsp;&emsp;上面这张图就是使用VB6.0进行开发时我们见到的界面。 1、一个工程由多个窗体组成（比如使用电脑QQ时，联系人列表是一个窗体，聊天界面又是一个窗体，同时与多人聊天把各个对话界面分开就是多个窗体）； 2、窗体上有许多控件：文本框Text、标签Label、输入框InputBox、定时器Timer、复选框CheckBox等等。并且，添加控件的方式也十分简单，直接从控件工具箱里面把控件拖动到窗体上即可； 3、双击窗体空白处就可以进入函数编写界面，在许多定义好的函数中编写用户逻辑，其触发方式有许多：比如程序启动时、窗体加载时、窗体显示时、窗体消失时、窗体卸载时等… 4、同样的对控件进行双击，编写控件的相关代码，其提供的函数有以下情况触发：单击时、双击时、值改变时、窗体消失时、属性改变时等… &emsp;&emsp; 2、我与VB&emsp;&emsp;故事的开始要从我的小学四年级说起…当时班上让同学们选定杂志，因为喜欢玩电脑就选了一本《少年电脑世界》。这杂志讲的东西比较杂，没有什么“硬”东西，对于小学生来说也是再适合不过了（可能现在的小学生不一样了…没法比没法比）。&emsp;&emsp;记得其中有一系列章节叫“当编程来敲门”，这是我第一次接触VB，接触编程。这一系列章节的实验效果是开发一个类似微软的计算器软件，但教程讲的东西特别简单，步骤也不全，照着做根本没法实现。自己瞎捣鼓了一阵子也就淡忘了… 少年电脑世界 &emsp;&emsp;真正开始学VB是在初三，买了一本《Visual Basic 6.0 从入门到精通》，一本很厚很厚的书。这个书就讲得十分详细，从软件介绍到实际操作，从控件介绍到控件编程，从load function到unload function…总之就是这本书然后我从啥也不懂变成了懂一点，能写点好玩的小东西~ 《Visual Basic 6.0 从入门到精通》 3、大创造&emsp;&emsp;初三学了一暑假，智商不够没学明白，等到高中，闲暇时间多了，上课走走神也爱想这些事，下课没事干（or上课没事干）偶尔也看看这本厚厚的从入门到精通。到高二，我迎来了一个爆发期。这段时间疯狂敲代码，灵感很多，做了一些东西，同时也意识到自己目前的技术真的太菜，需要学习的东西太多。比如，做个《生存游戏》，图片全是网上找的东拼西凑，那时也不会PS。&emsp;&emsp;下面还是列一些我觉得还比较好玩的东西吧~ 1、生存游戏简单刺激，动动鼠标即可体验！文章地址：生存游戏下载地址：点击下载 游戏内截图 当做完这个游戏后，我还在百度贴吧发了我为数不多的帖子，发在’VB吧’，还吸引了两个人一起做游戏，也就是后来的生存游戏2（当然，优良传统就是还是没做完！） 2、生存游戏2人物可以移动，还可以编辑地图！程序简介：有个BUG，进入游戏时会修改屏幕分辨率为800*600，但是在退出时并不会自动恢复，需要手动恢复分辨率。下载地址：点击下载 游戏内截图 3、大文件生成生成你想要大小的文件，内容无意义程序简介：其实生成的是文本文件，可以用记事本打开（希望不会特别卡…）下载地址：点击下载 4、2进制加密原理是对文件的每个字节进行凯撒位移程序简介：请一定记得设置的密码，不然就得试9999次了！下载地址：点击下载 4、点名（Beta版本、2.0版本）支持自定义班级，自定义学生！程序简介：写这个最初是方便Emily（English teacher)上课抽人回答问题下载地址：点名2 5、代码管理器记录和管理那些常用到的代码！程序简介：好的，我知道这个软件实用性不强。但是其意义是很明显的，说明那时的我就意识到需要这么一个工具来进行记录（就是笔记本吧）。不过这肯定是我之前UI做得最好的一个软件了！可以修改字体大小，字体前景色和背景色！下载地址：点击下载 5、局域控制程序简介：使用socket进行局域网通信，根据我自己设计的通信协议，主机可以向从机发送指令或者数据，然后从机调用系统API，达到远程控制的效果。 6、联机程序程序简介：相比比上一个，这个的难点在于多方通信，需要考虑服务器（主机）的运行逻辑，以及整个网络的结构，最终好像设计的是星型结构。 7、签名生成程序简介：生成一段字符串，“无星之夜的咏叹调，时间2021年6月13日，版本0.99，巴拉巴拉的”，就是为了方便自己写开头的注释吧~ 8、等等… 4、新时代&emsp;&emsp;高二下学期发生了很多事情，等到高三分班之后我就专心学习了，没有再搞这些。现在想想高二上的某两个星期，天天上课、吃饭、睡觉都在想怎么设计这个游戏，怎么来编程…真是疯狂。&emsp;&emsp;VB还是太老跟不上时代了，从此之后我就没有再怎么用过它了，它也终将火活在我的记忆中。等到高三毕业，看着Python越来越火，闲下来的我也有了新的事情可以做…生命不息、编程不止！&emsp;&emsp;推荐一波小甲鱼的Python入门课（互谅网的广大朋友们大家好~）哈哈哈"},{"title":"NFC名片","date":"2021-05-24T05:00:46.000Z","url":"/posts/d7c458d6/","tags":[["电子设计","/tags/%E7%94%B5%E5%AD%90%E8%AE%BE%E8%AE%A1/"],["成功实现","/tags/%E6%88%90%E5%8A%9F%E5%AE%9E%E7%8E%B0/"]],"categories":[["电子设计","/categories/%E7%94%B5%E5%AD%90%E8%AE%BE%E8%AE%A1/"]],"content":"NFC名片的一小步，我技术进步的一大步&emsp;&emsp;原域名 iloveasuna.cn不再使用，域名更改为 cyberbrain.top（电子脑）&emsp;&emsp;新域名新起点！ 1、回忆：惊喜、幻想和准备&emsp;&emsp;5月10日一次偶然的水群（忘了是“全国大学生电子设计竞赛交流群”还是立创EDA的“2021国赛助力群”），我看到有人在发 [已成功] 基于nfc的PCB名片 看了一下，觉得很好玩。&emsp;&emsp;做个NFC名片，既有普通名片的功能，还可以拿手机一贴就添加联系人，更能让对方记住你，岂不美哉？稍微改一下，还可以做成表白小卡片，场景自动化标签，甚至模拟饭卡交通卡…唔，想想就觉得有意思hhhh&emsp;&emsp;查了一些资料，看到了疑似该NFC名片的最初设计，很详细，很英文，很难读很快… 还仔细查看了NFC名片的核心部件——射频卡芯片NT3H1101W0FHKH的芯片手册，这是一个NTAG I2C - Energy harvesting NFC Forum Type 2 Tag withfield detection pin and I2C interface…emmm也就是这个芯片可以通过IIC通信，也可以通过RF通信；还可以从RF中获取能量从Vout引脚发出… 2、设计：克隆工程并编辑&emsp;&emsp;在OSHW Hub上的开源工程可以直接克隆到我的立创EDA编辑器（国产之光！）（另，第一次用立创EDA应该是上一个项目“航顺HK32开发板设计”，但迟迟没时间去调试就没有上传到博客）&emsp;&emsp;原始工程已经比较完善，我主要做了以下修改 丝印：当然是无星之夜的咏叹调了！ 元件的封装和位置，当时我觉得焊0402的电容是真的顶…LED的位置应该在灯泡图案接近“钨丝”的地方更合适 &emsp;&emsp;经过我做出实物后，复盘后修改过的工程地址：OSHW开源平台 3、PCB打样，元器件购买&emsp;&emsp;嘉立创PCB打样，5块钱包邮！强烈推荐。 &emsp;&emsp;贴片电阻、贴片电容、贴片LED，嗯，实验室都有…嘿嘿~然后就是这个NFC芯片 NT3H1101W0FHKH 了，购买10个+时，单价2.83，为了用刚刚才领的国赛队伍30减30助力券（别告诉我队友…）硬是买了11个芯片… &emsp;&emsp; 一切准备就绪，就等快递打我电话了┗( ▔, ▔ )┛ 4、焊接：热风枪初体验&emsp;&emsp;芯片一到货，兴致勃勃拆开，一看，傻眼了。 这芯片9个焊点，2mm*2mm大小，还是XQFN8的封装。我之前焊HK32芯片都焊得我想再也不碰电烙铁，自闭了几天…这可咋整。&emsp;&emsp;求助老师！老师二话不说拿起热风枪呼呼两下，哎呀，焊上了。后面我自己焊了4块，好家伙，热风枪这么强吗… &emsp;&emsp;芯片焊好之后就是LED、电阻、电容了，这些都是比较简单。 5、调试：80%的绝望&emsp;&emsp;焊好的第一块板子，调了一晚上不成。一接触到手机的NFC区域，指示灯闪一下即熄灭，查阅了芯片手册、网上教程、问答均无果。&emsp;&emsp;当我绝望的拿着NFC名片摆弄时，惊奇的发现…473的电阻啥时候变成了470…啊这…第二天把电阻一改，诶嘿，好了！真是 山穷水复疑无路，柳暗花明又一村 啊！&emsp;&emsp;然后就是调试程序，手机上装一个NFC工具专业版这个软件就可以实现对NFC名片的信息写入，可以写入的信息类型有：文本、URL/URI、文件、邮件、 联系人 、短信、WIFI、蓝牙等。经过测试，有些手机支持对不同类型信息自动处理，比如对文本信息是添加到便签；对联系人信息是直接新建通讯录联系人。 6、复盘&emsp;&emsp;记录一下这次设计与制作碰到的坑 在打样时，留好打样时编号的位置，不然它随便加一串奇奇怪怪的数字还是有点丑 小封装的焊盘，长条状可以稍微伸出，方便焊接 不需要的焊盘可以省略（中间那个） 这次板子做的是1.6mm，对于名片来说还是太厚了，可以选择薄一点1.2mm、1.0mm、0.8mm这些 7、最后&emsp;&emsp;很意外，没有焊坏一块，打样的5块板子都成功了。送了小可爱一块、送了老师一块。自己还剩3块，送不出去了O(∩_∩)O"},{"title":"oh~是咖喱饭的香味！","date":"2021-03-17T11:27:22.000Z","url":"/posts/5eef3697/","tags":[["生活","/tags/%E7%94%9F%E6%B4%BB/"],["食神下凡","/tags/%E9%A3%9F%E7%A5%9E%E4%B8%8B%E5%87%A1/"]],"categories":[["杂七杂八","/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"]],"content":"前奏：咖喱块之源&emsp;&emsp;早在高中时代，周末空闲的时候我偶尔会买咖喱回家做，做好咖喱之后淋在饭上，成了咖喱饭；淋在凉面上，成了咖喱面；淋在馒头上，成了咖喱馒头…这些美味一直被我所铭记，在学校被隔离的日子偶尔是格外想念…于是，1月中旬放假回来没多久，我就去永辉买了咖喱块准备回家做咖喱吃。可是懒病毒发作，这一耽搁就是一个月…又一个月，马上又要去上学了，赶紧趁着还有两天时间自己做一顿咖喱饭吃吧！ 主歌：众菜与咖喱&emsp;&emsp;首先，我们来清点一下今天出场的嘉宾：土豆、胡萝卜、鸡胸肉、咖喱。好的，开始做… &emsp;&emsp;1、给土豆和胡萝卜削皮，并去掉一些坏掉的地方。 &emsp;&emsp;2、土豆胡萝卜切丁 &emsp;&emsp;3、洗干净鸡胸肉，并让鸡胸肉比个心 &emsp;&emsp;4、这个心比的不好，切掉（误） &emsp;&emsp;5、给肌肉下锅煮一煮，等到水烧开就捞起来。这一步可以去除鸡肉的臭（？）味道 &emsp;&emsp;6、炒！爆炒！炒鸡肉，然后炒土豆胡萝卜！ &emsp;&emsp;7、然后加水，把众菜们一起煮了。（众就是指鸡肉、胡萝卜和土豆这三样…） &emsp;&emsp;8、等众们被煮软了，是时候拿出咖喱块下锅咯~搅拌搅拌…使其变得粘稠 停顿：趴餐桌&emsp;&emsp;累死了，弄一个多小时…马上就可以吃了…！ 副歌：进我胃里吧&emsp;&emsp;话不多说，很好吃！nice！ 间奏：玩手机&emsp;&emsp;对不起，我不知道取什么标题了。今天原神更新1.4，在此分享一下昨天20抽出了胡桃…温迪稳了（稳：无）…咳咳，太阳出来我晒太阳，月亮…. 尾奏：洗碗&emsp;&emsp;吃撑了洗洗碗运动运动，针不戳~（累死） 在自己博客上发这种文章hhh，分享生活也蛮不错。之后更多还是技术类的哦~欢迎留言评论，以及打赏（/doge）"},{"title":"博客更新日记","date":"2021-03-14T09:25:19.000Z","url":"/posts/3a4f2bb0/","tags":[["建站","/tags/%E5%BB%BA%E7%AB%99/"],["更新日记","/tags/%E6%9B%B4%E6%96%B0%E6%97%A5%E8%AE%B0/"]],"categories":[["建站","/categories/%E5%BB%BA%E7%AB%99/"]],"content":"博客更新日记 版本1.0 2021.1.23 网站建立 版本1.1 2021.3.14 原网站内容迁移完成 上线了评论系统 更改了背景图片、黑/白模式下的横幅图片，网站logo 2021.3.15 更改一些布局，优化体验 版本2.0 2021.5.17 更改域名 cyberbrain.top 修改网站信息 网站改为部署在CODING上 版本2.1 2021.5.24 修复了无法显示图片的BUG 发表了第一篇技术类博客NFC名片 2021.5.25 文章链接不再有中文，分享时更方便 2021.6.13 新建“编程”分类，熬夜完成VB6的回顾 删除网页上的备案标识 2021.6.26 修复了不能访问的BUG 原创文章图片添加水印”cyberbrain.top” 新增分享功能 "},{"title":"使用Hexo建站，挂在Github上","date":"2021-01-22T16:24:32.000Z","url":"/posts/cd509402/","tags":[["建站","/tags/%E5%BB%BA%E7%AB%99/"]],"categories":[["建站","/categories/%E5%BB%BA%E7%AB%99/"]],"content":"一穷二白的开山之作1、参考B站up主”CodeSheep”的视频，成功建站&emsp;&emsp;一个厉害的同学给我推荐了CodeSheep的B站教学视频这个视频讲得十分详细，还有弹幕助攻，照着做是可以完成的。&emsp;&emsp;视频主要内容就是使用hexo这个博客框架和github提供的page服务，让你可以高效、优雅且免费（！）的搭建一个静态的个人博客。这个静态并不是指你所看到的网页是静止的，它也可以有各种动图、视频、音乐、交互响应等。而github的page服务让我们免去了租赁服务器的费用，只需要注册个github账号，将我们的站点文件上传到仓库，并开始page服务就可以让别人愉快的访问啦~&emsp;&emsp;我搞了一晚上之后成功了，本来是挂在github上，但因为奇慢的速度让人心烦，就熬夜捣鼓了下放在gitee上了。感觉速度杠杠的~看着效果不错，然后就累了睡去… 2、域名绑定&emsp;&emsp;第二天，在我绑定域名的时候发现，gitee的自定义域名功能和自动部署功能居然要收钱？？唉，算了，好像github白天挺快的，那就还是换回去吧~&emsp;&emsp;沿用从前的域名：iloveasuna.cn 3、SSH免密自动登录、theme选择&emsp;&emsp;为了简化开发流程，不用每次部署的时候都要登录github，SSH免密登录是很有必要的。然后就一直百度吧，遇到各种bug，终于还是弄好了…&emsp;&emsp;然后在hexo的官方主题里面选了一款不错的主题 Kartos，接下来的就是优化界面了~ 4、总结一下基本开发流程&emsp;&emsp;使用hexo开发基本就用到这四个语句： &emsp;&emsp;首先 hexo new &lt;blogName&gt; 新建博客，这步会创建blogName.md文件，接下来编辑这个文件。（尝试着写了这一篇，感觉还行）&emsp;&emsp;然后再把上面剩下的3句挨个运行遍，完事~( hexo clean 看自己需求) 5、时隔两个月、移植以前的网站&emsp;&emsp;今天是2021.3.14，昨天hcj又问我要X锐格网址，emmmm。说好把以前的网站移植过来，鸽了接近2个月，好吧，今天就搞。&emsp;&emsp;首先将原来的所有东西一股脑放 博客根目录/source/oldsite文件夹内，与_posts同级。并将里面的图片全部压缩（我真的已经注意到背景图片加载很慢的问题了），删除无用的视频、音频，一些基于php和Python的服务也全部删除（但首页的链接保留了！还可以怀念！）&emsp;&emsp;hexo g 是将.md文件按照主题的配置，把js、css渲染进同一个html文件内，所以我以前写好的html、css、js是没有必要进行渲染的。然后打开在博客的根目录下 _config.yml 的配置文件，在配置文件中给skip_render字段添加不渲染的文件夹。 &emsp;&emsp;友情提醒：原网站入口在首页的最上方“原始网站”，小伙伴里可能有你认识的小伙伴… 6、没想到还有6&emsp;&emsp;应该没有别的要说了，最后…下面有打赏按钮，大家可以帮忙试一下好不好用哦~ (*^▽^*) 7、2021年5月17日&emsp;&emsp;注册了域名cyberbrain.top，电子脑嘛hhh。&emsp;&emsp;并且把网站部署在了CODING上。 "}]